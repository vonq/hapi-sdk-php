<?php

declare(strict_types=1);

/*
 * VONQHiringAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace VONQHiringAPILib\Models;

use stdClass;

class OptionsFacet implements \JsonSerializable
{
    /**
     * @var string
     */
    private $mDefault;

    /**
     * @var string
     */
    private $key;

    /**
     * @var string
     */
    private $label;

    /**
     * @var array|null
     */
    private $labels;

    /**
     * @var string
     */
    private $sort;

    /**
     * @var string|null
     */
    private $parent;

    /**
     * @var array[]|null
     */
    private $requires;

    /**
     * @param string $mDefault
     * @param string $key
     * @param string $label
     * @param string $sort
     */
    public function __construct(string $mDefault, string $key, string $label, string $sort)
    {
        $this->mDefault = $mDefault;
        $this->key = $key;
        $this->label = $label;
        $this->sort = $sort;
    }

    /**
     * Returns M Default.
     * Whether the option should be the default choice when rendering the SELECT.
     */
    public function getMDefault(): string
    {
        return $this->mDefault;
    }

    /**
     * Sets M Default.
     * Whether the option should be the default choice when rendering the SELECT.
     *
     * @required
     * @maps default
     */
    public function setMDefault(string $mDefault): void
    {
        $this->mDefault = $mDefault;
    }

    /**
     * Returns Key.
     * The value to be used when setting the value of the facet when this option is selected.
     */
    public function getKey(): string
    {
        return $this->key;
    }

    /**
     * Sets Key.
     * The value to be used when setting the value of the facet when this option is selected.
     *
     * @required
     * @maps key
     */
    public function setKey(string $key): void
    {
        $this->key = $key;
    }

    /**
     * Returns Label.
     * The option's user-friendly label
     */
    public function getLabel(): string
    {
        return $this->label;
    }

    /**
     * Sets Label.
     * The option's user-friendly label
     *
     * @required
     * @maps label
     */
    public function setLabel(string $label): void
    {
        $this->label = $label;
    }

    /**
     * Returns Labels.
     */
    public function getLabels(): ?array
    {
        return $this->labels;
    }

    /**
     * Sets Labels.
     *
     * @maps labels
     */
    public function setLabels(?array $labels): void
    {
        $this->labels = $labels;
    }

    /**
     * Returns Sort.
     * The order of the option in the list of options. lower value means higher rank.
     */
    public function getSort(): string
    {
        return $this->sort;
    }

    /**
     * Sets Sort.
     * The order of the option in the list of options. lower value means higher rank.
     *
     * @required
     * @maps sort
     */
    public function setSort(string $sort): void
    {
        $this->sort = $sort;
    }

    /**
     * Returns Parent.
     * References to Facets that becomes required when this option is selected
     */
    public function getParent(): ?string
    {
        return $this->parent;
    }

    /**
     * Sets Parent.
     * References to Facets that becomes required when this option is selected
     *
     * @maps parent
     */
    public function setParent(?string $parent): void
    {
        $this->parent = $parent;
    }

    /**
     * Returns Requires.
     *
     * @return array[]|null
     */
    public function getRequires(): ?array
    {
        return $this->requires;
    }

    /**
     * Sets Requires.
     *
     * @maps requires
     *
     * @param array[]|null $requires
     */
    public function setRequires(?array $requires): void
    {
        $this->requires = $requires;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['default']      = $this->mDefault;
        $json['key']          = $this->key;
        $json['label']        = $this->label;
        if (isset($this->labels)) {
            $json['labels']   = $this->labels;
        }
        $json['sort']         = $this->sort;
        if (isset($this->parent)) {
            $json['parent']   = $this->parent;
        }
        if (isset($this->requires)) {
            $json['requires'] = $this->requires;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
